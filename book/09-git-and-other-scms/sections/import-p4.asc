[[_perforce_import]]
==== Perforce

(((Perforce)))(((Importing, from Perforce)))
İdxal etməyə baxacağınız növbəti sistem Perforce'dir.
Yuxarıda müzakirə etdiyimiz kimi, Git və Perforce-un bir-birlərinə danışmalarına icazə verməyin iki yolu var: git-p4 və Perforce Git Fusion.

===== Perforce Git Fusion

Git Fusion bu prosesi kifayət qədər ağrısız edir.
Bir konfiqurasiya sənədindən istifadə edərək layihə parametrlərinizi, istifadəçi xəritələrinizi və branch-larınızı konfiqurasiya etməyiniz kifayətdir (<<_p4_git_fusion>>-da müzakirə olunduğu kimi) və deponu klonlayın.
Git Fusion, yerli bir Git deposuna bənzər bir şey buraxır, daha sonra istəsəniz local bir Git hostuna push etməyə hazırdır.
İstəsəniz, Perforce'ı Git ev sahibi kimi istifadə edə bilərsiniz.

[[_git_p4]]
===== Git-p4

Git-p4 idxal vasitəsi kimi də çıxış edə bilər.
Nümunə olaraq Jam layihəsini Perforce Public Depot-dan idxal edəcəyik.
Müştərinizi qurmaq üçün, Perforce deposuna işarə etmək üçün P4PORT mühit dəyişkənini ixrac etməlisiniz:

[source,console]
----
$ export P4PORT=public.perforce.com:1666
----

[NOTE]
====
Ardından izləmək üçün əlaqə qurmaq üçün bir Perforce deposuna ehtiyacınız var.
Nümunələrimiz üçün public.perforce.com saytındakı ictimai depodan istifadə edəcəyik, ancaq daxil olduğunuz hər hansı bir depodan istifadə edə bilərsiniz.
====

(((git commands, p4)))
Depo və layihə yolunu və layihəni idxal etmək istədiyiniz yolu təmin edərək Perforce serverindən Jam layihəsini idxal etmək üçün `git p4 clone` əmrini işə salın:

[source,console]
----
$ git-p4 clone //guest/perforce_software/jam@all p4import
Importing from //guest/perforce_software/jam@all into p4import
Initialized empty Git repository in /private/tmp/p4import/.git/
Import destination: refs/remotes/p4/master
Importing revision 9957 (100%)
----

Bu xüsusi layihənin yalnız bir branch-ı var, ancaq branch görünüşləri ilə (və ya yalnız bir qovluq yığını) konfiqurasiya edilmiş branch-larınız varsa,
bütün layihə branch-larını da idxal etmək üçün `--detect-branches` flagını `git p4 clone` üçün istifadə edə bilərsiniz.
Bu barədə bir az daha ətraflı məlumat üçün <<_git_p4_branches>> bölməsinə baxın.

Bu nöqtədə demək olar ki, bitirdiniz.
`p4import` qovluğuna gedib `git log`-ı işlətsəniz, idxal etdiyiniz işi görə bilərsiniz:

[source,console]
----
$ git log -2
commit e5da1c909e5db3036475419f6379f2c73710c4e6
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

    [git-p4: depot-paths = "//public/jam/src/": change = 8068]

commit aa21359a0a135dda85c50a7f7cf249e4f7b8fd98
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).

    [git-p4: depot-paths = "//public/jam/src/": change = 7304]
----

Hər git mesajında `git-p4` bir identifikator buraxdığını görə bilərsiniz.
Perforce dəyişiklik nömrəsinə daha sonra müraciət etməyiniz lazım olduğu təqdirdə bu identifikatoru orada saxlamaq yaxşıdır.
Bununla birlikdə, identifikatoru silmək istəsəniz, indi yeni depoda işə başlamazdan əvvəl bunu etməliyik.
(((git commands, filter-branch)))
Tanımlayıcı sətirləri kütləvi şəkildə silmək üçün `git filter-branch` istifadə edə bilərsiniz:

[source,console]
----
$ git filter-branch --msg-filter 'sed -e "/^\[git-p4:/d"'
Rewrite e5da1c909e5db3036475419f6379f2c73710c4e6 (125/125)
Ref 'refs/heads/master' was rewritten
----

`git log`-ı işə salırsınızsa, commit-lər üçün bütün SHA-1 hesablama cəmlərinin dəyişdiyini görə bilərsiniz, lakin `git-p4` string-ləri artıq commit mesajlarında yoxdur:

[source,console]
----
$ git log -2
commit b17341801ed838d97f7800a54a6f9b95750839b7
Author: giles <giles@giles@perforce.com>
Date:   Wed Feb 8 03:13:27 2012 -0800

    Correction to line 355; change </UL> to </OL>.

commit 3e68c2e26cd89cb983eb52c024ecdfba1d6b3fff
Author: kwirth <kwirth@perforce.com>
Date:   Tue Jul 7 01:35:51 2009 -0800

    Fix spelling error on Jam doc page (cummulative -> cumulative).
----

İdxalınız yeni Git serverinizə keçməyə hazırdır.